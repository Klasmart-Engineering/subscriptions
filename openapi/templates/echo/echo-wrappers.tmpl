// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
    Handler ServerInterface
}

{{range .}}{{$opid := .OperationId}}// {{$opid}} converts echo context to params.
func (w *ServerInterfaceWrapper) {{.OperationId}} (ctx echo.Context) error {
    var err error
{{range .PathParams}}// ------------- Path parameter "{{.ParamName}}" -------------
    var {{$varName := .GoVariableName}}{{$varName}} {{.TypeDef}}
{{if .IsPassThrough}}
    {{$varName}} = ctx.Param("{{.ParamName}}")
{{end}}
{{if .IsJson}}
    err = json.Unmarshal([]byte(ctx.Param("{{.ParamName}}")), &{{$varName}})
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
    }
{{end}}
{{if .IsStyled}}
    err = runtime.BindStyledParameterWithLocation("{{.Style}}",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationPath, ctx.Param("{{.ParamName}}"), &{{$varName}})
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
    }
{{end}}
{{end}}

{{range .SecurityDefinitions}}
    ctx.Set({{.ProviderName | sanitizeGoIdentity | ucFirst}}Scopes, {{toStringArray .Scopes}})
{{end}}

{{if .RequiresParamObject}}
    // Parameter object where we will unmarshal all parameters from the context
    var params {{.OperationId}}Params
{{range $paramIdx, $param := .QueryParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} query parameter "{{.ParamName}}" -------------
    {{if .IsStyled}}
    err = runtime.BindQueryParameter("{{.Style}}", {{.Explode}}, {{.Required}}, "{{.ParamName}}", ctx.QueryParams(), &params.{{.GoName}})
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
    }
    {{else}}
    if paramValue := ctx.QueryParam("{{.ParamName}}"); paramValue != "" {
    {{if .IsPassThrough}}
    params.{{.GoName}} = {{if not .Required}}&{{end}}paramValue
    {{end}}
    {{if .IsJson}}
    var value {{.TypeDef}}
    err = json.Unmarshal([]byte(paramValue), &value)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
    }
    params.{{.GoName}} = {{if not .Required}}&{{end}}value
    {{end}}
    }{{if .Required}} else {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument {{.ParamName}} is required, but not found"))
    }{{end}}
    {{end}}
{{end}}

{{if .HeaderParams}}
    headers := ctx.Request().Header
{{range .HeaderParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} header parameter "{{.ParamName}}" -------------
    if valueList, found := headers[http.CanonicalHeaderKey("{{.ParamName}}")]; found {
        var {{.GoName}} {{.TypeDef}}
        n := len(valueList)
        if n != 1 {
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for {{.ParamName}}, got %d", n))
        }
{{if .IsPassThrough}}
        params.{{.GoName}} = {{if not .Required}}&{{end}}valueList[0]
{{end}}
{{if .IsJson}}
        err = json.Unmarshal([]byte(valueList[0]), &{{.GoName}})
        if err != nil {
            return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
        }
{{end}}
{{if .IsStyled}}
        err = runtime.BindStyledParameterWithLocation("{{.Style}}",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationHeader, valueList[0], &{{.GoName}})
        if err != nil {
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
        }
{{end}}
        params.{{.GoName}} = {{if not .Required}}&{{end}}{{.GoName}}
        } {{if .Required}}else {
            return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter {{.ParamName}} is required, but not found"))
        }{{end}}
{{end}}
{{end}}

{{range .CookieParams}}
    if cookie, err := ctx.Cookie("{{.ParamName}}"); err == nil {
    {{if .IsPassThrough}}
    params.{{.GoName}} = {{if not .Required}}&{{end}}cookie.Value
    {{end}}
    {{if .IsJson}}
    var value {{.TypeDef}}
    var decoded string
    decoded, err := url.QueryUnescape(cookie.Value)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "Error unescaping cookie parameter '{{.ParamName}}'")
    }
    err = json.Unmarshal([]byte(decoded), &value)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
    }
    params.{{.GoName}} = {{if not .Required}}&{{end}}value
    {{end}}
    {{if .IsStyled}}
    var value {{.TypeDef}}
    err = runtime.BindStyledParameterWithLocation("simple",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationCookie, cookie.Value, &value)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
    }
    params.{{.GoName}} = {{if not .Required}}&{{end}}value
    {{end}}
    }{{if .Required}} else {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument {{.ParamName}} is required, but not found"))
    }{{end}}

{{end}}{{/* .CookieParams */}}

{{end}}{{/* .RequiresParamObject */}}
    // Invoke the callback with all the unmarshalled arguments
    {{if (or (eq .Path "/healthcheck") (eq .Path "/liveness"))}}
    monitoringContext := monitoring.NewMonitoringContext(monitoring.GlobalContext.Logger, ctx.Request().Context())
    err = w.Handler.{{.OperationId}}(ctx, monitoringContext{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
    return err
    {{else}}
    rw := ctx.Response().Writer
    txn := monitoring.GlobalContext.NewRelic.StartTransaction(transactionName(ctx))
    monitoringContext := monitoring.NewMonitoringContext(monitoring.GlobalContext.Logger, ctx.Request().Context())
    defer txn.End()
    txn.SetWebRequestHTTP(ctx.Request())
    ctx.Response().Writer = txn.SetWebResponse(rw)
    ctx.SetRequest(ctx.Request().WithContext(newrelic.NewContext(ctx.Request().Context(), txn)))
    monitoringContext.Info("Request started",
    			zap.String("method", ctx.Request().Method),
    			zap.String("url", ctx.Request().URL.String()))
    defer monitoringContext.Info("Request finished",
        zap.String("method", ctx.Request().Method),
        zap.String("url", ctx.Request().URL.String()))

    callHandler := true
    {{if and (eq .BodyRequired true) (eq (len .Bodies) 1)}}
        var request {{ (index .Bodies 0).Schema.RefType }}
        bytes, err := ioutil.ReadAll(ctx.Request().Body)
        if err != nil {
            monitoringContext.Error("could not read all body bytes", zap.Error(err))
            noContentOrLog(monitoringContext, ctx, 400)
            callHandler = false
        } else {
            err = json.Unmarshal(bytes, &request)
            if err != nil {
                monitoringContext.Error("Could not deserialize body", zap.Error(err))
                noContentOrLog(monitoringContext, ctx, 400)
                callHandler = false
            }
        }
    {{end}}
    {{if and (eq (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-api-key")) "%!s(<nil>)") (eq (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-jwt")) "%!s(<nil>)")}}
        passedAuth := true
    {{else}}
        passedAuth := false
        apiAuth := ApiAuth {}
    {{end}}
    {{if ne (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-api-key")) "%!s(<nil>)"}}
        bearerToken := strings.Replace(ctx.Request().Header.Get("X-Api-Key"), "Bearer ", "", 1)
        keyMatched, permissionMatched, clientName := security.CheckApiKey(monitoringContext, bearerToken, {{printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-api-key")}})

        if keyMatched && permissionMatched {
            apiAuth.ApiKey = &ApiKeyAuth{
                ClientName: clientName,
            }
            passedAuth = true
        }
    {{end}}
    {{if ne (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-jwt")) "%!s(<nil>)"}}
        jwtBearerToken := strings.Replace(ctx.Request().Header.Get("Authorization"), "Bearer ", "", 1)
        passed, jwtSubscriptionId, jwtAccountId, jwtAndroidId := security.CheckJwt(monitoringContext, jwtBearerToken)

        if passed {
            apiAuth.Jwt = &JwtAuth{
                SubscriptionId: jwtSubscriptionId,
                AccountId: jwtAccountId,
                AndroidId: jwtAndroidId,
            }
            passedAuth = true
        }
    {{end}}
    if callHandler && passedAuth {
        err = w.Handler.{{.OperationId}}(ctx, monitoringContext{{if or (ne (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-api-key")) "%!s(<nil>)") (ne (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-jwt")) "%!s(<nil>)")}}, apiAuth{{end}}{{if and (eq .BodyRequired true) (eq (len .Bodies) 1)}}, request{{end}}{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
    }

    if !passedAuth {
        {{if ne (printf "%s" (index .Spec.ExtensionProps.Extensions "x-auth-api-key")) "%!s(<nil>)"}}
            if !keyMatched {
                noContentOrLog(monitoringContext, ctx, 401)
            } else if !permissionMatched {
                noContentOrLog(monitoringContext, ctx, 403)
            }
        {{else}}
            noContentOrLog(monitoringContext, ctx, 401)
        {{end}}
    }

    if nil != err && !ctx.Response().Committed {
        ctx.Response().Writer = rw

        if httperr, ok := err.(*echo.HTTPError); ok {
            txn.SetWebResponse(nil).WriteHeader(httperr.Code)
        } else {
            txn.SetWebResponse(nil).WriteHeader(http.StatusInternalServerError)
        }
    }
    return err
    {{end}}
}
{{end}}

func transactionName(c echo.Context) string {
	ptr := handlerPointer(c.Handler())
	if ptr == handlerPointer(echo.NotFoundHandler) {
		return "NotFoundHandler"
	}
	if ptr == handlerPointer(echo.MethodNotAllowedHandler) {
		return "MethodNotAllowedHandler"
	}
	return c.Request().Method + " " + c.Path()
}

func handlerPointer(handler echo.HandlerFunc) uintptr {
	return reflect.ValueOf(handler).Pointer()
}

func noContentOrLog(monitoringContext *monitoring.Context, ctx echo.Context, status int) {
	if err := ctx.NoContent(status); err != nil {
		monitoringContext.Error("Could not write status code response", zap.Error(err))
	}
}

type ApiAuth struct {
	ApiKey *ApiKeyAuth
	Jwt *JwtAuth
}

type ApiKeyAuth struct {
	ClientName string
}

type JwtAuth struct {
	SubscriptionId string
	AccountId string
	AndroidId string
}
